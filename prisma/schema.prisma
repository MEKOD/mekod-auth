generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OAuthProvider {
  google
}

enum LoginResult {
  SUCCESS
  INVALID_PASSWORD
  USER_NOT_FOUND
  TOTP_REQUIRED
  TOTP_INVALID
  BLOCKED
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String
  emailVerifiedAt  DateTime?
  twoFactorSecret  String?
  twoFactorEnabled Boolean  @default(false)
  googleId         String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  sessions           Session[]
  passwordResets     PasswordResetToken[]
  emailVerifications EmailVerificationToken[]
  oauthAccounts      OAuthAccount[]
  loginAttempts      LoginAttempt[]
  devices            Device[]
  totpBackupCodes    TOTPBackupCode[]
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokenHash String
  userAgent        String?
  ip               String?
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model OAuthAccount {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          OAuthProvider
  providerAccountId String
  email             String?
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model LoginAttempt {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String?
  ip        String?
  userAgent String?
  result    LoginResult
  createdAt DateTime    @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([email])
}

model Device {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String?  // örn. "MacBook Pro", "iPhone"
  userAgent  String?
  ip         String?
  lastSeenAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([lastSeenAt])
}

model TOTPBackupCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeHash  String   @unique // yedek kodların hash'i
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}
